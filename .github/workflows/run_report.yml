name: Generate and Send Risk Report

on:
  schedule:
    - cron: '0 9 28 * *'  # Rodará às 9h do dia 28 de cada mês
  workflow_dispatch:  # Permite acionar manualmente

jobs:
  generate-report:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y msodbcsql17 mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc
          sudo apt-get install -y libgl1-mesa-glx
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Verify ODBC Driver
        run: |
          odbcinst -q -d -n "ODBC Driver 17 for SQL Server"
          
      - name: Calculate business date (d-2)
        id: date_calc
        run: |
          pip install pandas
          python -c "
          import pandas as pd
          from datetime import datetime, timedelta
          
          today = datetime.today()
          date = today
          business_days_subtracted = 0
          
          while business_days_subtracted < 2:
              date -= timedelta(days=1)
              if date.weekday() < 5:  # 0-4 = segunda a sexta
                  business_days_subtracted += 1
                  
          print(f'::set-output name=report_date::{date.strftime('%Y-%m-%d')}')
          "
          
      - name: Run Streamlit and generate PDF
        run: |
          pip install streamlit selenium pdfkit pyppeteer
          export DATA_BASE=${{ steps.date_calc.outputs.report_date }}
          
          # Modo headless do Streamlit
          nohup streamlit run main.py --server.headless true --server.port 8501 &
          sleep 15  # Aumentei o tempo para garantir que o Streamlit inicie
          
          # Gerar PDF
          python -c "
          import pdfkit
          options = {
              'page-size': 'A4',
              'margin-top': '0mm',
              'margin-right': '0mm',
              'margin-bottom': '0mm',
              'margin-left': '0mm',
              'encoding': 'UTF-8',
          }
          pdfkit.from_url('http://localhost:8501', 'risk_report.pdf', options=options)
          "
          
      - name: Send email
        run: |
          pip install sendgrid
          python -c "
          from sendgrid import SendGridAPIClient
          from sendgrid.helpers.mail import Mail, Attachment, FileContent, FileName, FileType, Disposition
          import base64
          import os
          
          message = Mail(
              from_email='gabriel.katsuura@hectare.com.br',
              to_emails='gabriel.katsuura@hectare.com.br',
              subject='Relatório de Risco de Enquadramento - ${{ steps.date_calc.outputs.report_date }}',
              html_content='<p>Segue em anexo o relatório gerado automaticamente.</p>')
          
          with open('risk_report.pdf', 'rb') as f:
              data = f.read()
              encoded = base64.b64encode(data).decode()
              
          attachment = Attachment(
              FileContent(encoded),
              FileName('risk_report_${{ steps.date_calc.outputs.report_date }}.pdf'),
              FileType('application/pdf'),
              Disposition('attachment'))
          message.attachment = attachment
          
          sg = SendGridAPIClient(os.environ.get('SENDGRID_API_KEY'))
          response = sg.send(message)
          print(response.status_code)
          "
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
