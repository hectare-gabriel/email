name: Generate and Save Risk Report

on:
  schedule:
    - cron: '0 9 28 * *'  # Rodará às 9h do dia 28 de cada mês
  workflow_dispatch:  # Permite acionar manualmente

jobs:
  generate-report:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y msodbcsql17 mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc
          sudo apt-get install -y libgl1-mesa-glx
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Verify ODBC Driver
        run: |
          odbcinst -q -d -n "ODBC Driver 17 for SQL Server"
          
      - name: Calculate business date (d-2)
        id: date_calc
        run: |
          pip install pandas
          python -c "
          import pandas as pd
          from datetime import datetime, timedelta
          
          today = datetime.today()
          date = today
          business_days_subtracted = 0
          
          while business_days_subtracted < 2:
              date -= timedelta(days=1)
              if date.weekday() < 5:  # 0-4 = segunda a sexta
                  business_days_subtracted += 1
                  
          print(f'::set-output name=report_date::{date.strftime('%Y-%m-%d')}')
          "
          
      - name: Create reports directory
        run: mkdir -p reports
          
      - name: Run Streamlit and generate PDF
        run: |
          pip install streamlit selenium pdfkit pyppeteer
          export DATA_BASE=${{ steps.date_calc.outputs.report_date }}
          
          # Modo headless do Streamlit
          nohup streamlit run main.py --server.headless true --server.port 8501 &
          sleep 15
          
          # Gerar PDF
          python -c "
          import pdfkit
          import os
          from datetime import datetime
          
          os.makedirs('reports', exist_ok=True)
          timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
          pdf_filename = f'reports/risk_report_{timestamp}.pdf'
          
          options = {
              'page-size': 'A4',
              'margin-top': '0mm',
              'margin-right': '0mm',
              'margin-bottom': '0mm',
              'margin-left': '0mm',
              'encoding': 'UTF-8',
          }
          pdfkit.from_url('http://localhost:8501', pdf_filename, options=options)
          print(f'PDF gerado e salvo em: {pdf_filename}')
          "
          
      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: risk-reports
          path: reports/